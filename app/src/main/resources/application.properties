# Database configuration
# H2 Database configuration for production (file-based)
# Using simple H2 file database configuration for maximum compatibility
spring.datasource.url=jdbc:h2:file:./data/telemetry
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# JPA/Hibernate properties
# This block configures JPA and Hibernate behavior:
# - spring.jpa.hibernate.ddl-auto=none: Disables automatic schema generation/updates by Hibernate.
# - spring.sql.init.mode=always: Ensures that SQL initialization scripts are always executed on startup.
# - spring.sql.init.schema-locations: Specifies the location of the schema SQL file to initialize the database.
spring.jpa.hibernate.ddl-auto=none
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql

# Connection pool configuration for better concurrency
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=30000

# Logging
# This block configures logging levels for Hibernate:
# - logging.level.org.hibernate.SQL=WARN: Sets the logging level for Hibernate SQL statements to WARN.
# - logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN: Sets the logging level for Hibernate parameter binding to WARN.
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Telemetry Event Processing Configuration
# Configure the async thread pool for telemetry event processing
# Adjust these values based on your hardware and load requirements

# Core number of threads to keep in the pool
telemetry.processing.core-pool-size=4

# Maximum number of threads in the pool  
telemetry.processing.max-pool-size=8

# Queue capacity for pending tasks
telemetry.processing.queue-capacity=100

# =================================
# METRICS CONFIGURATION - DISABLED BY DEFAULT
# =================================

# PERFORMANCE FIRST: Metrics disabled for zero overhead
# Enable only when specifically needed for monitoring or testing
management.metrics.enable.all=false

# Basic health check only (lightweight)
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=never

# Metrics infrastructure available but disabled
# To enable metrics, override with:
# management.metrics.enable.all=true
# management.endpoints.web.exposure.include=health,info,metrics,prometheus

# Custom metrics configuration (inactive when metrics disabled)
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles.http.server.requests=0.50,0.95,0.99
management.metrics.distribution.sla.http.server.requests=10ms,50ms,100ms,200ms,500ms

# Tag configuration for better metric organization (when enabled)
management.metrics.tags.application=telemetry-system
management.metrics.tags.environment=default
telemetry.processing.queue-capacity=100

# Rate Limiting Configuration
# DISABLED BY DEFAULT - Enable only for specific tests or production use
rate-limit.enabled=false

# Device-specific rate limiting (requests per minute)
rate-limit.telemetry.device.requests-per-minute=100

# IP-based rate limiting (requests per minute)  
rate-limit.ip.requests-per-minute=200

# Global rate limiting (requests per second)
rate-limit.global.requests-per-second=500

# Cache configuration
rate-limit.cache.max-size=100000
rate-limit.cache.expire-after-access-minutes=10 

# =================================
# QUEUE-BASED HIGH-PERFORMANCE PROCESSING
# =================================

# PERFORMANCE OPTIMIZATION: Queue-based processing for 10-20x throughput improvement
# DISABLED BY DEFAULT for backward compatibility - enable to activate high-performance mode
telemetry.queue.enabled=true

# Queue configuration (when enabled)
# Capacity: Maximum number of items in queue before overflow
telemetry.queue.capacity=10000

# Workers: Number of background threads processing the queue
# Recommended: 2x CPU cores for I/O bound workloads
telemetry.queue.workers=8

# Batch processing (future enhancement)
telemetry.queue.batch-size=25
telemetry.queue.batch-timeout=100ms

# Fallback behavior when queue is full
# Options: sync (fallback to synchronous), reject (return error), drop (discard)
telemetry.queue.fallback=sync

# Queue metrics and monitoring
telemetry.queue.metrics.enabled=true
telemetry.queue.metrics.interval=10s 