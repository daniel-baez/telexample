# Database configuration
# H2 Database configuration for production (file-based)
# Using simple H2 file database configuration for maximum compatibility
spring.datasource.url=jdbc:h2:file:./data/telemetry
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# JPA/Hibernate properties
# This block configures JPA and Hibernate behavior:
# - spring.jpa.hibernate.ddl-auto=none: Disables automatic schema generation/updates by Hibernate.
# - spring.sql.init.mode=always: Ensures that SQL initialization scripts are always executed on startup.
# - spring.sql.init.schema-locations: Specifies the location of the schema SQL file to initialize the database.
spring.jpa.hibernate.ddl-auto=none
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql

# Connection pool configuration for better concurrency
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=30000

# Logging
# This block configures logging levels for Hibernate:
# - logging.level.org.hibernate.SQL=WARN: Sets the logging level for Hibernate SQL statements to WARN.
# - logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN: Sets the logging level for Hibernate parameter binding to WARN.
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Telemetry Event Processing Configuration
# Configure the async thread pool for telemetry event processing
# Adjust these values based on your hardware and load requirements

# Core number of threads to keep in the pool
telemetry.processing.core-pool-size=4

# Maximum number of threads in the pool  
telemetry.processing.max-pool-size=8

# Queue capacity for pending tasks
telemetry.processing.queue-capacity=100

# =================================
# METRICS CONFIGURATION - DISABLED BY DEFAULT
# =================================

# PERFORMANCE FIRST: Metrics disabled for zero overhead
# Enable only when specifically needed for monitoring or testing
management.metrics.enable.all=false

# Basic health check only (lightweight)
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=never

# Metrics infrastructure available but disabled
# To enable metrics, override with:
# management.metrics.enable.all=true
# management.endpoints.web.exposure.include=health,info,metrics,prometheus

# Custom metrics configuration (inactive when metrics disabled)
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.distribution.percentiles.http.server.requests=0.50,0.95,0.99
management.metrics.distribution.sla.http.server.requests=10ms,50ms,100ms,200ms,500ms

# Tag configuration for better metric organization (when enabled)
management.metrics.tags.application=telemetry-system
management.metrics.tags.environment=default