# Database configuration
# This block configures the database connection details:
# - spring.datasource.url: Specifies the JDBC URL for the SQLite database file 'telemetry.db'.
# - spring.datasource.driver-class-name: Sets the JDBC driver class for SQLite.
# - spring.jpa.database-platform: Configures Hibernate to use the SQLite dialect for database operations.
spring.datasource.url=jdbc:sqlite:telemetry.db
spring.datasource.driver-class-name=org.sqlite.JDBC
spring.jpa.database-platform=org.hibernate.community.dialect.SQLiteDialect

# JPA/Hibernate properties
# This block configures JPA and Hibernate behavior:
# - spring.jpa.hibernate.ddl-auto=none: Disables automatic schema generation/updates by Hibernate.
# - spring.sql.init.mode=always: Ensures that SQL initialization scripts are always executed on startup.
# - spring.sql.init.schema-locations: Specifies the location of the schema SQL file to initialize the database.
spring.jpa.hibernate.ddl-auto=none
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql

# Logging
# This block configures logging levels for Hibernate:
# - logging.level.org.hibernate.SQL=WARN: Sets the logging level for Hibernate SQL statements to WARN.
# - logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN: Sets the logging level for Hibernate parameter binding to WARN.
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Telemetry Event Processing Configuration
# Configure the async thread pool for telemetry event processing
# Adjust these values based on your hardware and load requirements

# Core number of threads to keep in the pool
telemetry.processing.core-pool-size=4

# Maximum number of threads in the pool  
telemetry.processing.max-pool-size=8

# Queue capacity for pending tasks
telemetry.processing.queue-capacity=100 